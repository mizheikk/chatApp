var chatApp = angular.module('chatApp', ['ngRoute','chatAppControllers','chatAppServices']);

chatApp.config(['$routeProvider',
  function($routeProvider) {
    $routeProvider.
      when('/chat', {
        templateUrl: 'chat.html'
      }).
      otherwise({
        templateUrl: 'login.html'
      });
  }]);

var chatAppControllers = angular.module('chatAppControllers', []);

var username;
var timestamp;
var errorMsg;

chatAppControllers.controller('loginController', function($route, $scope, $location, FirebaseService) {

  var users = FirebaseService.getUsers();
  $scope.users = users;

  $scope.addUser = function() {
    username = $scope.newUsername;
    var promise = FirebaseService.addUser(username);
    promise.then(function(tms) {
      timestamp = tms;
      $location.url("chat/");
    }, function(reason) {
      $scope.info='Failed: ' + reason;
    }, function(update) {
      $scope.info='Failed: ' + update;
    });
  }
});

chatAppControllers.controller('setMessageController', function($location, $routeParams, $scope, FirebaseService) {

  $scope.addMessage = function() {
    var promise = FirebaseService.checkTimestamp(username,timestamp);
    promise.then(function() {
      FirebaseService.addMessage(username,$scope.newMessage);
      $scope.newMessage = '';
    }, function() {
      $location.url("/");
      errorMsg = "Error! Session is not valid.";
    });
  }
});

chatAppControllers.controller('getMessagesController', function($scope, FirebaseService) {
  var messages = FirebaseService.getMessages();
  $scope.messages = messages;
});

var chatAppServices = angular.module('chatAppServices', ['firebase']);

chatAppServices.service('FirebaseService', function($firebaseObject, $firebaseArray, $q) {
  var databaseURL = 'https://luminous-torch-1910.firebaseio.com';
  var dataRef = new Firebase(databaseURL);
  //var data = $firebaseObject(dataRef);

  this.addUser = function(name) {
    var ref= new Firebase(databaseURL);
    var usersRef = ref.child("users");
    var deferred = $q.defer();

    usersRef.once("value", function(snapshot) {
      if ( snapshot.child(name).exists() == false) {
        var timestamp = Date.now();
        usersRef.child(name).set(timestamp, function(error) {
          if(error) deferred.reject(error);
          else {
            deferred.resolve(timestamp);
          }
        });
      }
      else {
        deferred.reject("Username is already in use.");
      }
    });
    return deferred.promise;
  }

  this.addMessage = function(name,msg) {
    var ref= new Firebase(databaseURL);
    var messagesRef = ref.child('messages');
    var newMessage = messagesRef.push();
    newMessage.set({
      author:name,
      message:msg
    });
  }

  this.getMessages = function() {
    var messagesRef = dataRef.child("messages");
    var messages = $firebaseArray(messagesRef);
    return messages;
  }

  this.getUsers = function() {
    var usersRef = dataRef.child("users");
    var users = $firebaseArray(usersRef);
    return users;
  }

  this.checkTimestamp = function(name,timestamp) {
    var ref = new Firebase(databaseURL+'/users/'+name);
    var deferred = $q.defer();

    ref.once('value', function(data) {
      if(data.val() == timestamp)
        deferred.resolve();
      else
        deferred.reject();
    });
    return deferred.promise;
  }

});
